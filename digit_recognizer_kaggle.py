# -*- coding: utf-8 -*-
"""Digit_Recognizer_kaggle.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17NpchwpPlxSA6orrsodo5B5wYVSA5lVS
"""

import numpy as np
import pandas as pd
train=pd.read_csv("train.csv")
test=pd.read_csv("test.csv")

Y_prime=train["label"]


Y1=Y_prime.to_numpy()

Y=np.zeros((10,42000))

for i in range(42000):
  if Y1[i]==0 :
    Y[0][i]=1
    Y[1][i]=0
    Y[2][i]=0
    Y[3][i]=0
    Y[4][i]=0
    Y[5][i]=0
    Y[6][i]=0
    Y[7][i]=0
    Y[8][i]=0
    Y[9][i]=0
  
  elif Y1[i]==1 :
    Y[0][i]=0
    Y[1][i]=1
    Y[2][i]=0
    Y[3][i]=0
    Y[4][i]=0
    Y[5][i]=0
    Y[6][i]=0
    Y[7][i]=0
    Y[8][i]=0
    Y[9][i]=0

  elif Y1[i]==2 :
    Y[0][i]=0
    Y[1][i]=0
    Y[2][i]=1
    Y[3][i]=0
    Y[4][i]=0
    Y[5][i]=0
    Y[6][i]=0
    Y[7][i]=0
    Y[8][i]=0
    Y[9][i]=0

  elif Y1[i]==3 :
    Y[0][i]=0
    Y[1][i]=0
    Y[2][i]=0
    Y[3][i]=3
    Y[4][i]=0
    Y[5][i]=0
    Y[6][i]=0
    Y[7][i]=0
    Y[8][i]=0
    Y[9][i]=0

  elif Y1[i]==4 :
    Y[0][i]=0
    Y[1][i]=0
    Y[2][i]=0
    Y[3][i]=0
    Y[4][i]=1
    Y[5][i]=0
    Y[6][i]=0
    Y[7][i]=0
    Y[8][i]=0
    Y[9][i]=0

  elif Y1[i]==5 :
    Y[0][i]=0
    Y[1][i]=0
    Y[2][i]=0
    Y[3][i]=0
    Y[4][i]=0
    Y[5][i]=1
    Y[6][i]=0
    Y[7][i]=0
    Y[8][i]=0
    Y[9][i]=0

  elif Y1[i]==6 :
    Y[0][i]=0
    Y[1][i]=0
    Y[2][i]=0
    Y[3][i]=0
    Y[4][i]=0
    Y[5][i]=0
    Y[6][i]=1
    Y[7][i]=0
    Y[8][i]=0
    Y[9][i]=0

  elif Y1[i]==7 :
    Y[0][i]=0
    Y[1][i]=0
    Y[2][i]=0
    Y[3][i]=0
    Y[4][i]=0
    Y[5][i]=0
    Y[6][i]=0
    Y[7][i]=1
    Y[8][i]=0
    Y[9][i]=0

  elif Y1[i]==8 :
    Y[0][i]=0
    Y[1][i]=0
    Y[2][i]=0
    Y[3][i]=0
    Y[4][i]=0
    Y[5][i]=0
    Y[6][i]=0
    Y[7][i]=0
    Y[8][i]=1
    Y[9][i]=0

  elif Y1[i]==9 :
    Y[0][i]=0
    Y[1][i]=0
    Y[2][i]=0
    Y[3][i]=0
    Y[4][i]=0
    Y[5][i]=0
    Y[6][i]=0
    Y[7][i]=0
    Y[8][i]=0
    Y[9][i]=1


X_prime=train.iloc[0:42000,0:784]
X=X_prime.to_numpy()

X=X.T

X_t=test.iloc[0:28000,0:784]
X_test=X_t.to_numpy()
X_test=X_test.T

def sigmoid(z):
  
  s=1/(1+(np.exp(-z)))
  return s

def initialize_params(dim):
  
  w=np.random.randn(dim,10)
  b=np.random.randn(10,1)
  return w,b

def propagation(w,b,X,Y):

  m=X.shape[1]
  A=sigmoid(np.dot(w.T,X)+b)
  cost = (-1/m)*(np.dot(np.log(A),Y.T)+np.dot(np.log(1-A),(1-Y).T))

  dw = (1/m)*(np.dot(X,(A-Y).T))
  db = (1/m)*(np.sum(A-Y))  

  grads={"dw":dw,
         "db":db}
  
  return grads,cost

def optimize(w,b,X,Y):

  for i in range(2000):
    grads,cost=propagation(w,b,X,Y)
    dw=grads["dw"]
    db=grads["db"]
    w=w-(0.002*dw)
    b=b-(0.002*db)
  
  params={"w":w,
          "b":b}
  return params

def predict(w,b,X):
  A=sigmoid(np.dot(w.T,X)+b)
  Y_prediction=np.zeros((1,28000))
  for i in range(28000):
    max=-1
    for j in range(10):
      if A[j][i]>max :
        max=A[j][i]
        pred=j
    Y_prediction[0][i]=pred
  return Y_prediction

def model(X_train,Y_train,X_test,Y1):
  k=X_train.shape[0]
  w,b=initialize_params(k)
  params=optimize(w,b,X_train,Y_train)
  w=params["w"]
  b=params["b"]
  Y_prediction=predict(w,b,X_test)
  print(Y_prediction.T)
  #Y_prediction_train=predict(w,b,X_train)
  #print("train accuracy: {} %".format(100 - np.mean(np.abs(Y_prediction_train - Y1)) * 100))
  # Y_prediction_train=Y_prediction_train.T
  # c=0
  # for i in range(42000):
  #   if Y_prediction_train[i][0]==Y1[i] :
  #     c+=1
  # print(c/420)
  pd.DataFrame(Y_prediction.T).to_csv("submission1.csv",header=None)

model(X,Y,X_test,Y1)
